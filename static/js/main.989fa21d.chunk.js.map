{"version":3,"sources":["constants.ts","redux/dataSlice.ts","redux/applicationSlice.ts","Components/Buttons/MenuButton/MenuButton.tsx","Components/ContextMenus/ContextMenu/ContextMenu.tsx","utils/util.ts","redux/stylesSlice.ts","Components/Buttons/Button/Button.tsx","Components/Dialogs/Dialog/Dialog.tsx","Components/Dialogs/InputDialog/InputDialog.tsx","Components/Dialogs/StyleDialog/StyleDialog.tsx","Components/Utilities/Draggable/Draggable.tsx","Components/Utilities/Focusable/Focusable.tsx","Components/Cells/Cell/Cell.tsx","hooks/useContextMenu.tsx","Components/Utilities/Dropdown/Dropdown.tsx","Components/Cells/DisplayCell/DisplayCell.tsx","Components/Cells/InputCell/InputCell.tsx","Components/Cells/SelectCell/SelectCell.tsx","Components/Menus/ComponentMenu/ComponentMenu.tsx","Components/Menus/PropertiesMenu/CellOptions/CellOptions.tsx","Components/Menus/PropertiesMenu/PropertiesMenu.tsx","Components/Menus/Toolbar/Toolbar.tsx","Components/App/App.tsx","redux/store.ts","index.tsx"],"names":["ElementTypes","ViewModes","DefaultPosition","dataSlice","createSlice","name","initialState","elements","ids","reducers","elementAdded","state","action","payload","id","elementType","value","formula","push","valueChanged","formulaChanged","idChanged","newId","oldId","splice","indexOf","viewMode","edit","focusedId","applicationSlice","viewModeChanged","newMode","focusChanged","extraReducers","builder","addCase","actions","MenuButton","props","className","onClick","event","icon","text","ContextMenu","position","closeMenu","useEffect","window","addEventListener","removeEventListener","menuBody","options","map","optionGroup","index","option","style","left","x","top","y","zIndex","stringIsNumber","input","isNaN","Number","positiveOrZero","NaN","stylesSlice","elementMoved","styleChanged","textColor","backgroundColor","fontSize","fontWeight","fontFamily","borderThickness","borderColor","borderRadius","Button","hasOwnProperty","styleType","modifiers","Dialog","title","allowCancel","onCancel","undefined","children","footer","InputDialog","useState","currentValue","setCurrentValue","error","setError","result","onSubmit","inputLabel","onChange","target","onKeyPress","key","autoFocus","StyleDialog","setStyle","inputs","type","defaultValue","initialValue","Draggable","handleDrop","active","dragging","setDragging","clickPositionOnElement","setClickPositionOnElement","initialPosition","setPosition","handleMouseMove","useCallback","preventDefault","clientX","clientY","handleEscapePress","document","onMouseDown","nativeEvent","offsetX","offsetY","onMouseUp","onContextMenu","cursor","color","borderWidth","thickness","radius","Focusable","dispatch","useDispatch","Cell","handleValueChange","handleClick","readonly","autocomplete","useSelector","styles","shallowEqual","application","canDrag","setCanDrag","updateCellPosition","dialog","setDialog","contextMenu","setContextMenu","stopPropagation","useContextMenu","cancel","newID","length","contextOptions","handleContextMenuClick","readOnly","autoComplete","Dropdown","choices","onSelection","DisplayCell","element","data","elementsByID","uppercaseFormula","toUpperCase","split","slice","dropdownOptions","SUPPORTED_FORMULAS","filter","includes","sort","a","b","handleDropdownClick","selection","appendToFront","join","view","matchedIDs","match","valueToInsert","replace","calc","parser","parse","getCellValue","InputCell","SelectCell","ComponentMenu","addElementCallback","inputCell","displayCell","selectCell","PRESET_COLORS","validHexCode","RegExp","CellOptions","IdComponent","ColorPicker","label","SelectCellOptions","setId","onBlur","initialColor","setColor","colorInput","setColorInput","setActive","submitColor","submitWithSlider","presets","test","PropertiesMenu","menu","focusedType","Toolbar","FormulaParser","require","Parser","App","allIDs","addElementByType","store","configureStore","reducer","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.989fa21d.chunk.js","sourcesContent":["export enum ElementTypes {\n    inputCell = \"inputCell\",\n    displayCell = \"displayCell\",\n    selectCell = \"selectCell\",\n}\n\nexport enum ViewModes {\n    edit = \"Edit Mode\",\n    view = \"View Mode\"\n}\n\nexport enum DefaultPosition {\n    x = 200,\n    y = 200,\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface ElementData {\n    id: string;\n    elementType: string;\n    value: string;\n    formula: string;\n}\n\ninterface State {\n    elements: { [id: string]: ElementData };\n    ids: string[];\n}\n\nconst initialState: State = {\n    elements: {},\n    ids: [],\n};\n\nconst dataSlice = createSlice({\n    name: \"data\",\n    initialState: initialState,\n    reducers: {\n        elementAdded(state, action: PayloadAction<{ id: string; elementType: string }>) {\n            state.elements[action.payload.id] = {\n                id: action.payload.id,\n                elementType: action.payload.elementType,\n                value: \"\",\n                formula: \"\",\n            };\n            state.ids.push(action.payload.id);\n        },\n        valueChanged(state, action: PayloadAction<{ id: string; value: string }>) {\n            state.elements[action.payload.id].value = action.payload.value;\n        },\n        formulaChanged(state, action) {\n            state.elements[action.payload.id].formula = action.payload.formula;\n        },\n        idChanged(state, action: PayloadAction<{ oldId: string; newId: string }>) {\n            state.elements[action.payload.newId] = state.elements[action.payload.oldId];\n            state.elements[action.payload.newId].id = action.payload.newId; // change the nested id too\n            delete state.elements[action.payload.oldId];\n            state.ids.push(action.payload.newId);\n            state.ids.splice(state.ids.indexOf(action.payload.oldId), 1);\n        },\n    },\n});\n\nexport default dataSlice;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ViewModes } from \"../constants\";\nimport dataSlice from \"./dataSlice\";\n\ninterface State {\n  viewMode: ViewModes;\n  focusedId: string | null;\n}\n\nconst initialState: State = {\n  viewMode: ViewModes.edit,\n  focusedId: null,\n};\n\nconst applicationSlice = createSlice({\n  name: \"application\",\n  initialState: initialState,\n  reducers: {\n    viewModeChanged(state, action: PayloadAction<{ newMode: ViewModes }>) {\n      state.viewMode = action.payload.newMode;\n    },\n    focusChanged(state, action: PayloadAction<{ focusedId: string }>) {\n      state.focusedId = action.payload.focusedId;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(dataSlice.actions.idChanged, (state, action) => {\n      if (state.focusedId === action.payload.oldId) {\n        // if the focused id is the one changed, update the current focus\n        state.focusedId = action.payload.newId;\n      }\n    });\n  },\n});\n\nexport default applicationSlice;\n","import React from \"react\";\nimport \"../../../../node_modules/@fortawesome/fontawesome-free/css/all.css\";\nimport \"./MenuButton.css\";\n\ninterface MenuButtonProps {\n  text: string;\n  icon?: string;\n  action(): void;\n}\n\n/**\n * Button that is made for toolbar-like interfaces. Flat with no background color.\n * Can have icon and text but will only show text if screen width allows (experimental)\n * @param props\n */\nexport default function MenuButton(props: MenuButtonProps) {\n  return (\n    <button\n      className=\"menu-button\"\n      onClick={(event: React.MouseEvent<HTMLButtonElement>) => {\n        props.action();\n      }}\n    >\n      {props.icon ? <i className={props.icon} /> : ''}\n      <span>{props.text}</span>\n    </button>\n  );\n}\n","import { useEffect } from \"react\";\nimport \"./ContextMenu.css\";\n\nexport interface ContextOption {\n  text: string;\n  action(): void;\n}\ninterface Props {\n  options: ContextOption[][]; // multidimensional to allow for grouping\n  position: { x: number; y: number };\n  closeMenu(): void;\n}\n\nexport default function ContextMenu(props: Props) {\n  const { position, closeMenu } = props;\n\n  // add a listener to close menu on any other click on the page\n  useEffect(() => {\n    window.addEventListener(\"click\", closeMenu);\n    return () => {\n      window.removeEventListener(\"click\", closeMenu);\n    };\n  }, [closeMenu]);\n\n  const menuBody = props.options.map((optionGroup, index) => {\n    return (\n      <div key={index} className=\"context-option-group\">\n        {optionGroup.map((option) => {\n          return (\n            <div key={option.text} className=\"context-option\" onClick={option.action}>\n              {option.text}\n            </div>\n          );\n        })}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"context-menu\" style={{ left: position.x, top: position.y, zIndex: 1000 }}>\n      {menuBody}\n    </div>\n  );\n}\n","/**\n * Checks that a number type is actually a number and not NaN\n * @param input the number to be checked\n */\nexport function numberIsNumber(input: number): boolean {\n    return Number(input) === input && !isNaN(input);\n}\n\n/**\n * Checks that a string type is a number and\n * @param input the number to be checked\n */\nexport function stringIsNumber(input: string): boolean {\n    return !isNaN(Number(input)) && input !== \"\";\n}\n\n/**\n * If the input is less than zero, return 0. Otherwise, return the input.\n * @param input the number to be checked\n */\nexport function positiveOrZero(input: number) : number {\n    if (isNaN(input)) return NaN; // don't overwrite NaNs so it doesn't go unnoticed\n    return input >= 0 ? input : 0;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport dataSlice from \"./dataSlice\";\n\nexport interface ElementStyle {\n  position: {\n    x: number;\n    y: number;\n  };\n  textColor: string;\n  backgroundColor: string;\n  fontSize: string;\n  fontWeight: \"bold\" | \"bolder\" | \"lighter\" | \"normal\";\n  fontFamily: 'Roboto' | 'Noto Sans JP';\n  borderThickness: string;\n  borderColor: string;\n  borderRadius: string;\n}\n\ninterface State {\n  elements: { [id: string]: ElementStyle };\n}\n\nconst initialState: State = {\n  elements: {},\n};\n\nconst stylesSlice = createSlice({\n  name: \"styles\",\n  initialState: initialState,\n  reducers: {\n    elementMoved(state, action: PayloadAction<{ id: string; x: number; y: number }>) {\n      state.elements[action.payload.id].position = {\n        x: action.payload.x,\n        y: action.payload.y,\n      };\n    },\n    styleChanged(state, action: PayloadAction<{ id: string; style: { [type: string]: string } }>) {\n      state.elements[action.payload.id] = {\n        ...state.elements[action.payload.id],\n        ...action.payload.style,\n      }; // spread both objects to change only the properties passed\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(dataSlice.actions.elementAdded, (state, action) => {\n        state.elements[action.payload.id] = {\n          position: { x: 200, y: 200 }, // default position\n          textColor: \"black\",\n          backgroundColor: \"white\",\n          fontSize: '16px',\n          fontWeight: 'normal',\n          fontFamily: 'Roboto',\n          borderThickness: '1px',\n          borderColor: 'black',\n          borderRadius: '0'\n        }; \n      })\n      .addCase(dataSlice.actions.idChanged, (state, action) => {\n        state.elements[action.payload.newId] = state.elements[action.payload.oldId];\n        delete state.elements[action.payload.oldId];\n      });\n  },\n});\n\nexport default stylesSlice;\n","import React from \"react\";\nimport \"../../../../node_modules/@fortawesome/fontawesome-free/css/all.css\";\nimport \"./Button.css\";\n\nexport interface TextButtonProps {\n  text: string;\n  styleType: \"primary\" | \"info\" | \"muted\" | \"success\" | \"warning\" | \"danger\";\n  modifiers?: \"outline\";\n  action(): void;\n}\n\nexport interface IconButtonProps {\n  icon: string;\n  action(): void;\n}\n\ntype ButtonProps = TextButtonProps | IconButtonProps;\n\nfunction isTextButton(value: ButtonProps): value is TextButtonProps {\n  return value.hasOwnProperty(\"text\");\n}\n\nexport default function Button(props: ButtonProps) {\n  if (isTextButton(props)) {\n    return (\n      <button\n        className={\"button \" + props.styleType + \" \" + props.modifiers}\n        onClick={props.action}\n      >\n        {props.text}\n      </button>\n    );\n  }\n  // if we get here it must be an icon button\n  return <i onClick={props.action} className={\"icon-button \" + props.icon}></i>;\n}\n","import React from \"react\";\nimport Button from \"../../Buttons/Button/Button\";\nimport \"./Dialog.css\";\n\ninterface Props {\n  title: string;\n  children?: JSX.Element | JSX.Element[];\n  footer: JSX.Element | JSX.Element[];\n  onCancel(): void;\n  allowCancel: boolean;\n}\n\nexport default function Dialog(props: Props) {\n  return (\n    <div className=\"dialog-background\">\n      <div className=\"dialog\">\n        <div className=\"header\">\n          <span className=\"dialog-title\">{props.title}</span>\n          {props.allowCancel ? (\n            <Button icon={\"far fa-times-circle\"} action={props.onCancel} />\n          ) : undefined}\n        </div>\n        <div className=\"content\">{props.children}</div>\n        <div className=\"footer\">{props.footer}</div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport Button from \"../../Buttons/Button/Button\";\nimport Dialog from \"../Dialog/Dialog\";\nimport \"./InputDialog.css\";\n\ninterface Props {\n  title: string;\n  inputLabel: string;\n  onSubmit(value: string): { error: string } | void;\n  onCancel(): void;\n}\n\nexport default function InputDialog(props: Props) {\n  const [currentValue, setCurrentValue] = useState<string>(\"\");\n  const [error, setError] = useState<string>(\"\");\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCurrentValue(event.target.value);\n  };\n\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLElement>) => {\n    if (event.key === \"Enter\") {\n      props.onSubmit(currentValue);\n    }\n  };\n\n  return (\n    <Dialog\n      title={props.title}\n      onCancel={props.onCancel}\n      footer={\n        <Button\n          text={\"Change\"}\n          styleType={\"success\"}\n          action={() => {\n            const result = props.onSubmit(currentValue);\n            if (result !== undefined) {\n              setError(result.error);\n            } else {\n              setError(\"\");\n            }\n          }}\n        />\n      }\n      allowCancel={true}\n    >\n      <label className=\"label\">\n        {props.inputLabel}\n        <input\n          className={\"input\" + (error !== \"\" ? \" error\" : \"\")}\n          value={currentValue}\n          onChange={handleInput}\n          onKeyPress={handleKeyPress}\n          autoFocus={true}\n        />\n      </label>\n      <div className=\"error-message\">{error}</div>\n    </Dialog>\n  );\n}\n","import React, { useState } from \"react\";\nimport { HexColorPicker } from \"react-colorful\";\nimport Button from \"../../Buttons/Button/Button\";\nimport Dialog from \"../Dialog/Dialog\";\nimport \"./StyleDialog.css\";\n\ninterface Props {\n  title: string;\n  options: { text: string; type: string; initialValue?: string }[];\n  onSubmit(style: { [option: string]: string }): void;\n  onCancel(): void;\n}\n\nexport function StyleDialog(props: Props) {\n  const [style, setStyle] = useState<{ [option: string]: string }>({}); // store the style object\n\n  const inputs = props.options.map((option) => {\n    // create a series of inputs and labels and assign functions to them\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setStyle((style) => {\n        return { ...style, [option.type]: event.target.value };\n      });\n    };\n\n    const handleKeyPress = (event: React.KeyboardEvent<HTMLElement>) => {\n      if (event.key === \"Enter\") {\n        props.onSubmit(style);\n      }\n    };\n\n    return (\n      <label key={option.type} className=\"label\">\n        {option.text}\n        <input\n          className=\"input\"\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          defaultValue={option.initialValue}\n        />\n      </label>\n    );\n  });\n\n  return (\n    <Dialog\n      title={props.title}\n      footer={\n        <Button\n          text={\"Done\"}\n          styleType=\"success\"\n          action={() => {\n            props.onSubmit(style);\n          }}\n        />\n      }\n      onCancel={props.onCancel}\n      allowCancel={true}\n    >\n      {inputs}\n    </Dialog>\n  );\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { positiveOrZero } from \"../../../utils/util\";\nimport \"./Draggable.css\";\n\nconst TOP_OFFSET = 25;\nconst LEFT_OFFSET = 50;\n\ninterface Props {\n  initialPosition: { x: number; y: number };\n  handleDrop(x: number, y: number): void;\n  active: boolean;\n  children?: React.ReactNode;\n  style: { color: string; thickness: string; radius: string; backgroundColor: string;};\n  onContextMenu(event: React.MouseEvent<HTMLElement>): void;\n}\n\nexport default function Draggable(props: Props) {\n  const { handleDrop, active, children } = props;\n  const [dragging, setDragging] = useState<boolean>(false);\n  const [clickPositionOnElement, setClickPositionOnElement] = useState({ x: 0, y: 0 });\n  const [position, setPosition] = useState(props.initialPosition);\n\n  const handleMouseMove = useCallback(\n    (event: MouseEvent) => {\n      if (dragging) {\n        event.preventDefault();\n        setPosition({\n          x: positiveOrZero(event.clientX - clickPositionOnElement.x - LEFT_OFFSET),\n          y: positiveOrZero(event.clientY - clickPositionOnElement.y - TOP_OFFSET),\n        });\n      }\n    },\n    [setPosition, dragging, clickPositionOnElement]\n  );\n\n  const handleMouseDown = (event: React.MouseEvent<HTMLElement>) => {\n    if (active) {\n      setDragging(true);\n      setClickPositionOnElement({ x: event.nativeEvent.offsetX, y: event.nativeEvent.offsetY });\n      // save offset to allow user to drag from anywhere on the input\n    }\n  };\n\n  const handleMouseUp = (event: React.MouseEvent<HTMLElement>) => {\n    if (dragging) {\n      setDragging(false);\n      handleDrop(\n        positiveOrZero(event.clientX - clickPositionOnElement.x - LEFT_OFFSET),\n        positiveOrZero(event.clientY - clickPositionOnElement.y - TOP_OFFSET)\n      );\n    }\n  };\n\n  const handleEscapePress = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        setDragging(false);\n        setPosition(props.initialPosition);\n      }\n    },\n    [setDragging, setPosition, props.initialPosition]\n  );\n\n  useEffect(() => {\n    document.addEventListener(\"mousemove\", handleMouseMove);\n    document.addEventListener(\"keyup\", handleEscapePress); // drop element if escape is pressed\n    return () => {\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n      document.removeEventListener(\"keyup\", handleEscapePress);\n    };\n  }, [handleMouseMove, handleEscapePress]);\n\n  return (\n    <div\n      className=\"draggable\"\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onContextMenu={props.onContextMenu}\n      style={{\n        cursor: active ? \"move\" : \"auto\",\n        position: \"absolute\",\n        top: position.y,\n        left: position.x,\n        borderColor: props.style.color,\n        borderWidth: props.style.thickness,\n        borderRadius: props.style.radius,\n        backgroundColor: props.style.backgroundColor,\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport applicationSlice from \"../../../redux/applicationSlice\";\n\ninterface Props {\n  id: string;\n  children: React.ReactNode;\n}\n\nexport default function Focusable(props: Props) {\n  const dispatch = useDispatch();\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    dispatch(applicationSlice.actions.focusChanged({focusedId: props.id}))\n  }\n\n  return <div onClick={handleClick}>{props.children}</div>;\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\nimport { ViewModes } from \"../../../constants\";\nimport useContextMenu from \"../../../hooks/useContextMenu\";\nimport dataSlice from \"../../../redux/dataSlice\";\nimport { RootState } from \"../../../redux/store\";\nimport stylesSlice from \"../../../redux/stylesSlice\";\nimport { ContextOption } from \"../../ContextMenus/ContextMenu/ContextMenu\";\nimport InputDialog from \"../../Dialogs/InputDialog/InputDialog\";\nimport { StyleDialog } from \"../../Dialogs/StyleDialog/StyleDialog\";\nimport Draggable from \"../../Utilities/Draggable/Draggable\";\nimport Focusable from \"../../Utilities/Focusable/Focusable\";\nimport \"./Cell.css\";\n\ninterface CellProps {\n  id: string;\n  value: string;\n  handleValueChange(event: React.ChangeEvent<HTMLInputElement>): void;\n  handleClick(event: React.MouseEvent<HTMLInputElement>): void;\n  readonly: boolean;\n  autocomplete: boolean;\n  contextOptions: ContextOption[][];\n  children?: React.ReactNode;\n}\n\n/**\n * Base Cell component used in other cell types.\n * @param props\n */\nexport function Cell(props: CellProps) {\n  const { id, value, handleValueChange, handleClick, readonly, autocomplete, children } = props;\n  const dispatch = useDispatch();\n  const style = useSelector((state: RootState) => {\n    return { ...state.styles.elements[id] }; // spread here to assure a new reference so that shallowEqual doesn't short circuit to true\n  }, shallowEqual);\n  const viewMode = useSelector((state: RootState) => {\n    return state.application.viewMode;\n  });\n\n  const [canDrag, setCanDrag] = useState<boolean>(false); // variable to allow dragging\n  useEffect(() => {\n    setCanDrag(viewMode === ViewModes.edit); // allow dragging on viewmode change\n  }, [viewMode]);\n\n  const updateCellPosition = useCallback(\n    (x: number, y: number) => {\n      dispatch(stylesSlice.actions.elementMoved({ id: id, x: x, y: y }));\n    },\n    [dispatch, id]\n  );\n\n  const [dialog, setDialog] = useState<JSX.Element>(<></>);\n\n  const changeIdContextOption: ContextOption = {\n    text: \"Change ID\",\n    action: () => {\n      const cancel = () => {\n        setDialog(<></>);\n        setCanDrag(true);\n      };\n      setCanDrag(false); // don't allow dragging because the div is fullscreen, so you could otherwise click anywhere and drag\n      setDialog(\n        <InputDialog\n          title={\"Change ID\"}\n          inputLabel={\"New ID\"}\n          onSubmit={(newID) => {\n            if (newID.length === 0) {\n              return { error: \"Must choose an ID.\" };\n            }\n            dispatch(dataSlice.actions.idChanged({ oldId: props.id, newId: newID }));\n            cancel();\n          }}\n          onCancel={cancel}\n        />\n      );\n    },\n  };\n\n  const changeStyleContextOption: ContextOption = {\n    text: \"Style\",\n    action: () => {\n      const cancel = () => {\n        setDialog(<></>);\n        setCanDrag(true);\n      };\n      setCanDrag(false); // don't allow dragging because the div is fullscreen, so you could otherwise click anywhere and drag\n      setDialog(\n        <StyleDialog\n          title={\"Style\"}\n          options={[\n            { text: \"Border Color\", type: \"borderColor\", initialValue: style.borderColor },\n            {\n              text: \"Border Thickness\",\n              type: \"borderThickness\",\n              initialValue: style.borderThickness,\n            },\n            { text: \"Border Radius\", type: \"borderRadius\", initialValue: style.borderRadius },\n            { text: \"Font Color\", type: \"textColor\", initialValue: style.textColor },\n            { text: \"Font Size\", type: \"fontSize\", initialValue: style.fontSize },\n            { text: \"Font Weight\", type: \"fontWeight\", initialValue: style.fontWeight },\n            { text: \"Font Name\", type: \"fontFamily\", initialValue: style.fontFamily },\n          ]}\n          onSubmit={(style) => {\n            dispatch(stylesSlice.actions.styleChanged({ id: props.id, style: style }));\n            cancel(); // delete dialog after submit\n          }}\n          onCancel={cancel}\n        />\n      );\n    },\n  };\n\n  const [contextMenu, handleContextMenuClick] = useContextMenu([\n    [changeIdContextOption, changeStyleContextOption],\n    ...props.contextOptions,\n  ]);\n\n  return (\n    <Focusable id={id}>\n      <Draggable\n        active={canDrag}\n        onContextMenu={handleContextMenuClick}\n        handleDrop={updateCellPosition}\n        initialPosition={style.position}\n        style={{\n          color: style.borderColor,\n          thickness: style.borderThickness,\n          radius: style.borderRadius,\n          backgroundColor: style.backgroundColor,\n        }}\n      >\n        <span className=\"id-label\">{viewMode === ViewModes.edit ? id : \"\"}</span>\n        <input\n          className=\"cell\"\n          id={id}\n          type=\"text\"\n          onChange={handleValueChange}\n          onContextMenu={handleContextMenuClick}\n          onMouseDown={handleClick}\n          value={value}\n          readOnly={readonly}\n          autoComplete={autocomplete ? \"on\" : \"off\"}\n          style={{\n            color: style.textColor,\n            fontSize: style.fontSize,\n            fontWeight: style.fontWeight,\n            fontFamily: style.fontFamily,\n          }}\n        />\n        {contextMenu}\n        {children}\n        {dialog}\n      </Draggable>\n    </Focusable>\n  );\n}\n","import React, { useCallback, useState } from \"react\";\nimport ContextMenu, { ContextOption } from \"../Components/ContextMenus/ContextMenu/ContextMenu\";\nimport { positiveOrZero } from \"../utils/util\";\n\nexport default function useContextMenu(\n  options: ContextOption[][]\n): [JSX.Element, (event: React.MouseEvent<HTMLElement>) => void] {\n  const [contextMenu, setContextMenu] = useState<JSX.Element>(<></>);\n\n  const handleContextMenuClick = useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      event.preventDefault(); // prevent default context\n      event.stopPropagation();\n      setContextMenu(\n        <ContextMenu\n          options={options}\n          position={{\n            x: positiveOrZero(event.nativeEvent.offsetX + 10), // add small offsets so that cursor isn't on menu when it appears\n            y: positiveOrZero(event.nativeEvent.offsetY + 5),\n          }}\n          closeMenu={() => {\n            setContextMenu(<></>);\n          }}\n        />\n      );\n    },\n    [setContextMenu, options]\n  );\n  return [contextMenu, handleContextMenuClick];\n}\n","import \"./Dropdown.css\";\n\ninterface DropdownProps {\n  options: {\n    text: string;\n    value: string;\n  }[];\n  onSelection(selection: string): void;\n}\n\nexport default function Dropdown(props: DropdownProps) {\n  // return a function to handle event but allow value to be passed in first\n  const handleClick = (value: string) => {\n    return (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      props.onSelection(value);\n    };\n  };\n\n  // the rendered choices\n  const choices = props.options.map((option, index) => {\n    return (\n      <div\n        key={option.value + index}\n        className=\"dropdown-choice\"\n        onClick={handleClick(option.value)}\n      >\n        {option.text}\n      </div>\n    );\n  });\n\n  return <div className={props.options.length === 0 ? \"hidden\" : \"dropdown\"}>{choices}</div>;\n}\n","import React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ViewModes } from \"../../../constants\";\nimport { parser, SUPPORTED_FORMULAS } from \"../../App/App\";\nimport { Cell } from \"../Cell/Cell\";\nimport { stringIsNumber } from \"../../../utils/util\";\nimport Dropdown from \"../../Utilities/Dropdown/Dropdown\";\nimport { RootState } from \"../../../redux/store\";\nimport dataSlice from \"../../../redux/dataSlice\";\n\ninterface DisplayCellProps {\n  id: string;\n}\n\n/**\n * Display cell for rendering the results of formulas.\n */\nexport default function DisplayCell(props: DisplayCellProps) {\n  const dispatch = useDispatch();\n  const element = useSelector((state: RootState) => {\n    return { ...state.data.elements[props.id] };\n  });\n  const viewMode = useSelector((state: RootState) => {\n    return state.application.viewMode;\n  });\n  const elementsByID = useSelector((state: RootState) => {\n    return { ...state.data.elements };\n  });\n\n  const uppercaseFormula = element.formula.toUpperCase().split(\"(\").slice(-1)[0]; // create const for performance\n  const dropdownOptions =\n    uppercaseFormula === \"\"\n      ? []\n      : SUPPORTED_FORMULAS.filter(\n          (formula: string) => formula.includes(uppercaseFormula) // autocomplete on type\n        )\n          .sort((a: string, b: string) => {\n            return a.indexOf(uppercaseFormula) - b.indexOf(uppercaseFormula);\n          })\n          .map((formula: string) => {\n            return { text: formula, value: formula };\n          });\n\n  const handleValueChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      dispatch(dataSlice.actions.formulaChanged({ id: element.id, formula: event.target.value }));\n    },\n    [dispatch, element.id]\n  );\n\n  const handleInputClick = (event: React.MouseEvent<HTMLInputElement>) => {\n    event.stopPropagation(); // don't let this bubble so that you must click the edges to move a cell\n  }\n\n  const handleDropdownClick = useCallback(\n    (selection: string) => {\n      dispatch(\n        dataSlice.actions.formulaChanged({\n          id: element.id,\n          formula: element.formula + selection + \"(\",\n        })\n      );\n    },\n    [dispatch, element.id, element.formula]\n  );\n\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLElement>) => {\n    if ((event.key === \"Enter\" || event.key === \"Tab\") && dropdownOptions.length > 0) {\n      const appendToFront = !element.formula.includes(\"(\")\n        ? \"\"\n        : element.formula.split(\"(\").slice(0, -1).join(\"(\") + // replace everything after last open parentheses\n          \"(\"; // add parenthesis back after removal during split\n\n      dispatch(\n        dataSlice.actions.formulaChanged({\n          id: element.id,\n          formula: appendToFront + dropdownOptions[0].text + \"(\",\n        })\n      );\n    }\n  };\n\n  const getCellValue = () => {\n    if (viewMode === ViewModes.edit) {\n      return element.formula;\n    } else if (viewMode === ViewModes.view) {\n      // find instances of referenced cells and replace their values\n      let formula = element.formula;\n      const matchedIDs = formula.match(/{.+?}/g);\n      if (matchedIDs !== null) {\n        for (let id of matchedIDs) {\n          // check that id exists before lookup\n          let valueToInsert;\n          if (elementsByID[id.slice(1, -1)] !== undefined) {\n            // make sure that the id exists before adding it\n            valueToInsert = elementsByID[id.slice(1, -1)].value; // slice off { and }\n          } else {\n            return \"#ERROR\";\n          }\n\n          // check the type of the value because all are stored as strings\n          // but quotes must be added to non number values\n          if (stringIsNumber(valueToInsert)) {\n            formula = formula.replace(id, valueToInsert);\n          } else if (!stringIsNumber(valueToInsert)) {\n            formula = formula.replace(id, '\"' + valueToInsert + '\"'); // add quotes for string inputs\n          }\n        }\n      }\n      const calc = parser.parse(formula);\n      if (calc.error !== null) return calc.error;\n      return calc.result;\n    } else {\n      return \"\";\n    }\n  };\n\n  return (\n    <div onKeyPress={handleKeyPress}>\n      <Cell\n        id={element.id}\n        value={getCellValue()}\n        handleValueChange={handleValueChange}\n        handleClick={handleInputClick}\n        readonly={viewMode === ViewModes.view}\n        autocomplete={false}\n        contextOptions={[]}\n      >\n        {viewMode === ViewModes.edit ? (\n          <Dropdown\n            key={\"dropdown\" + element.id}\n            onSelection={handleDropdownClick}\n            options={dropdownOptions}\n          />\n        ) : undefined}\n      </Cell>\n    </div>\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\nimport { ViewModes } from \"../../../constants\";\nimport dataSlice from \"../../../redux/dataSlice\";\nimport { RootState } from \"../../../redux/store\";\nimport { Cell } from \"../Cell/Cell\";\n\ninterface InputCellProps {\n    id: string;\n}\n\n/**\n * Cell that accepts user-input values.\n * @param id: the ID the cell was created with / used to access element data in state.data.elements\n */\nexport default function InputCell(props: InputCellProps) {\n    const dispatch = useDispatch();\n    const element = useSelector((state: RootState) => {\n        return { ...state.data.elements[props.id] }; // spread here to assure a new reference so that shallowEqual doesn't short circuit to true\n    }, shallowEqual);\n    const viewMode = useSelector((state: RootState) => {\n        return state.application.viewMode;\n    });\n\n    const handleValueChange = useCallback(\n        (event: React.ChangeEvent<HTMLInputElement>) => {\n            dispatch(dataSlice.actions.valueChanged({ id: props.id, value: event.target.value }));\n        },\n        [dispatch, props.id]\n    );\n\n    const handleInputClick = (event: React.MouseEvent<HTMLInputElement>) => {\n        event.stopPropagation(); // don't let this bubble so that you must click the edges to move a cell\n      }\n\n    const getCellValue = () => {\n        if (viewMode === ViewModes.edit) return \"\";\n        return element.value;\n    };\n\n    return (\n        <Cell\n            id={props.id}\n            value={getCellValue()}\n            handleValueChange={handleValueChange}\n            handleClick={handleInputClick}\n            readonly={viewMode === ViewModes.edit}\n            autocomplete={false}\n            contextOptions={[]}\n        >\n        </Cell>\n    );\n}\n","import React, { useState } from \"react\";\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\nimport { ViewModes } from \"../../../constants\";\nimport { RootState } from \"../../../redux/store\";\nimport Dropdown from \"../../Utilities/Dropdown/Dropdown\";\nimport { Cell } from \"../Cell/Cell\";\nimport \"./SelectCell.css\";\n\ninterface Props {\n  id: string;\n}\n\nexport default function SelectCell(props: Props) {\n  const dispatch = useDispatch();\n  const element = useSelector((state: RootState) => {\n    return { ...state.data.elements[props.id] }; // spread here to assure a new reference so that shallowEqual doesn't short circuit to true\n  }, shallowEqual);\n  const [value, setValue] = useState<string>(element.value);\n\n  const handleKeyPress = () => {};\n  const handleValueChange = () => {};\n  const handleInputClick = (event: React.MouseEvent<HTMLInputElement>) => {\n    event.stopPropagation(); // don't let this bubble so that you must click the edges to move a cell\n  };\n  const handleDropdownClick = () => {};\n  const dropdownOptions = [{ text: element.formula, value: element.formula }];\n\n  return (\n    <div onKeyPress={handleKeyPress}>\n      <Cell\n        id={props.id}\n        value={value}\n        handleValueChange={handleValueChange}\n        handleClick={handleInputClick}\n        readonly={false}\n        autocomplete={false}\n        contextOptions={[]}\n      >\n        <Dropdown\n          key={\"dropdown\" + props.id}\n          onSelection={handleDropdownClick}\n          options={dropdownOptions}\n        />\n      </Cell>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ElementTypes } from \"../../../constants\";\nimport MenuButton from \"../../Buttons/MenuButton/MenuButton\";\nimport './ComponentMenu.css'\n\ninterface ComponentMenuProps {\n  addElementCallback(elementType: string): void;\n}\n\nexport default function ComponentMenu(props: ComponentMenuProps) {\n  return (\n    <div className=\"component-menu\">\n      <MenuButton\n        text={\"Input Cell\"}\n        icon={\"fas fa-i-cursor\"}\n        action={() => {\n          props.addElementCallback(ElementTypes.inputCell);\n        }}\n      />\n      <MenuButton\n        text={\"Display Cell\"}\n        icon={\"fas fa-square-root-alt\"}\n        action={() => {\n          props.addElementCallback(ElementTypes.displayCell);\n        }}\n      />\n      <MenuButton\n        text={\"Select Cell\"}\n        icon={\"fas fa-caret-square-down\"}\n        action={() => {\n          props.addElementCallback(ElementTypes.selectCell);\n        }}\n      />\n    </div>\n  );\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport dataSlice from \"../../../../redux/dataSlice\";\nimport { RgbaStringColorPicker } from \"react-colorful\";\nimport \"react-colorful/dist/index.css\";\nimport \"./CellOptions.css\";\nimport stylesSlice from \"../../../../redux/stylesSlice\";\nimport { RootState } from \"../../../../redux/store\";\n\nconst PRESET_COLORS = [\n  \"rgba(255, 0, 0, 1)\", // red [start of first row]\n  \"rgba(0, 128, 0, 1)\", // green\n  \"rgba(0, 0, 255, 1)\", // blue\n  \"rgba(255, 255, 0, 1)\", // yellow\n  \"rgba(255, 140, 0, 1)\", // orange\n  \"rgba(0, 0, 0, 1)\", // black\n  \"rgba(255, 255, 255, 1)\", // white\n  \"rgba(255, 0, 0, 0.4)\", // light red [start of second row]\n  \"rgba(0, 128, 0, 0.4)\", // light green\n  \"rgba(0, 0, 255, 0.4)\", // light blue\n  \"rgba(255, 255, 0, 0.4)\", // light yellow\n  \"rgba(255, 140, 0, 0.4)\", // light orange\n  \"rgba(0, 0, 0, 0.5)\", // gray\n  \"rgba(0, 0, 0, 0.1)\", // light gray\n];\n\nconst validHexCode = new RegExp(/[abcdef1234567890]{6}/);\n\ninterface CellOptionsProps {\n  id: string;\n}\n\nexport function CellOptions(props: CellOptionsProps) {\n  return (\n    <div className=\"properties-list cell\">\n      <IdComponent id={props.id} />\n      <ColorPicker label={\"Border Color\"} styleType={\"borderColor\"} id={props.id} />\n      <ColorPicker label={\"Font Color\"} styleType={\"textColor\"} id={props.id} />\n      <ColorPicker label={\"Background Color\"} styleType={\"backgroundColor\"} id={props.id} />\n    </div>\n  );\n}\n\ninterface SelectCellOptionsProps {\n  id: string;\n}\n\nexport function SelectCellOptions(props: SelectCellOptionsProps) {\n  return (\n    <div className=\"properties-list cell\">\n      <IdComponent id={props.id} />\n      <ColorPicker label={\"Border Color\"} styleType={\"borderColor\"} id={props.id} />\n      <ColorPicker label={\"Font Color\"} styleType={\"textColor\"} id={props.id} />\n      <ColorPicker label={\"Background Color\"} styleType={\"backgroundColor\"} id={props.id} />\n    </div>\n  );\n}\n\nfunction IdComponent(props: { id: string }) {\n  const dispatch = useDispatch();\n  const [id, setId] = useState<string>(props.id);\n\n  useEffect(() => {\n    setId(props.id);\n  }, [props.id, setId]);\n\n  const changeId = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setId(event.target.value);\n  };\n\n  const handleBlur = () => {\n    if (props.id === id) return;\n    dispatch(dataSlice.actions.idChanged({ oldId: props.id, newId: id }));\n  };\n\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      if (props.id === id) return;\n      dispatch(dataSlice.actions.idChanged({ oldId: props.id, newId: id }));\n    }\n  };\n\n  return (\n    <div className=\"option\">\n      <label className=\"label\">ID</label>\n      <input\n        className=\"input\"\n        onChange={changeId}\n        onBlur={handleBlur}\n        value={id}\n        onKeyPress={handleKeyPress}\n      />\n    </div>\n  );\n}\n\nfunction ColorPicker(props: {\n  label: string;\n  styleType: \"borderColor\" | \"textColor\" | \"backgroundColor\";\n  id: string;\n}) {\n  const { label, styleType, id } = props;\n  const dispatch = useDispatch();\n\n  const initialColor = useSelector((state: RootState) => {\n    return state.styles.elements[props.id][props.styleType];\n  });\n  const [color, setColor] = useState<string>(initialColor);\n  const [colorInput, setColorInput] = useState<string>(\"\");\n  const [active, setActive] = useState<boolean>(false);\n\n  // show the popup when the menu is clicked\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation();\n    setActive(true);\n  };\n\n  // callback for submitting color -- this changes every time the id changes\n  const submitColor = useCallback(\n    (color) => {\n      dispatch(stylesSlice.actions.styleChanged({ id: id, style: { [styleType]: color } }));\n    },\n    [dispatch, id, styleType]\n  );\n\n  // close the popup\n  const submitWithSlider = useCallback(() => {\n    dispatch(stylesSlice.actions.styleChanged({ id: id, style: { [styleType]: color } }));\n    setActive(false);\n  }, [dispatch, id, styleType, color]);\n\n  // called when someone types a color into the input\n  const colorInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setColorInput(event.target.value);\n    if (event.target.value.length === 6 && validHexCode.test(event.target.value)) {\n      setColor(\"#\" + event.target.value);\n    }\n  };\n\n  // when focused changes\n  useEffect(() => {\n    // set initial color\n    setColor(initialColor);\n  }, [initialColor]);\n\n  // when focused element changes\n  useEffect(() => {\n    // add listener for close\n    document.addEventListener(\"click\", submitWithSlider);\n    return () => {\n      document.removeEventListener(\"click\", submitWithSlider);\n    };\n  }, [submitWithSlider]);\n\n  // change the value in the input when the slider is moved\n  useEffect(() => {\n    setColorInput(color.replace(\"#\", \"\"));\n  }, [color]);\n\n  // create the preset colors\n  const presets = PRESET_COLORS.map((color) => {\n    return (\n      <div\n        key={color}\n        style={{ backgroundColor: color }}\n        onClick={(event: React.MouseEvent<HTMLElement>) => {\n          event.stopPropagation();\n          submitColor(color);\n          setActive(false);\n        }}\n      />\n    );\n  });\n\n  return (\n    <div className=\"option\">\n      <label className=\"label\">{label}</label>\n      <div className={\"color-picker\"} onClick={handleClick} style={{ backgroundColor: color }}>\n        {active ? (\n          <div className=\"popup\">\n            <div className=\"presets\">{presets}</div>\n            <RgbaStringColorPicker color={color} onChange={setColor} />\n            <div className=\"color-input\">\n              <div>r</div>\n              <input onChange={colorInputChange} value={colorInput} />\n            </div>\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../../redux/store\";\nimport \"./PropertiesMenu.css\";\nimport { CellOptions, SelectCellOptions } from \"./CellOptions/CellOptions\";\nimport { ElementTypes } from \"../../../constants\";\n\ninterface Props {}\n\nexport default function PropertiesMenu(props: Props) {\n  const focusedId = useSelector((state: RootState) => {\n    return state.application.focusedId;\n  });\n  const focusedType = useSelector((state: RootState) => {\n    if (state.application.focusedId === null) {\n      return null;\n    }\n    return state.data.elements[state.application.focusedId].elementType;\n  });\n\n  let menu: React.ReactNode;\n\n  if (focusedId === null) {\n    return <div className=\"properties-menu\"></div>;\n  }\n\n  switch (focusedType) {\n    case ElementTypes.displayCell:\n      menu = <CellOptions id={focusedId} />;\n      break;\n    case ElementTypes.inputCell:\n      menu = <CellOptions id={focusedId} />;\n      break;\n    case ElementTypes.selectCell:\n      menu = <SelectCellOptions id={focusedId} />;\n      break;\n    default:\n      menu = <></>;\n  }\n\n  return <div className=\"properties-menu\">{menu}</div>;\n}\n","import React from \"react\";\nimport \"./Toolbar.css\";\n\ninterface ToolbarProps {\n  children?: React.ReactNode;\n}\n\nexport default function Toolbar(props: ToolbarProps) {\n  return <div className=\"toolbar\">{props.children}</div>;\n}\n","import React, { useCallback } from \"react\";\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\nimport { ElementTypes, ViewModes } from \"../../constants\";\nimport applicationSlice from \"../../redux/applicationSlice\";\nimport dataSlice from \"../../redux/dataSlice\";\nimport { RootState } from \"../../redux/store\";\nimport MenuButton from \"../Buttons/MenuButton/MenuButton\";\nimport DisplayCell from \"../Cells/DisplayCell/DisplayCell\";\nimport InputCell from \"../Cells/InputCell/InputCell\";\nimport SelectCell from \"../Cells/SelectCell/SelectCell\";\nimport ComponentMenu from \"../Menus/ComponentMenu/ComponentMenu\";\nimport PropertiesMenu from \"../Menus/PropertiesMenu/PropertiesMenu\";\nimport Toolbar from \"../Menus/Toolbar/Toolbar\";\nimport \"./App.css\";\n\n// initialize parser object\nvar FormulaParser = require(\"hot-formula-parser\").Parser;\nexport const SUPPORTED_FORMULAS = require(\"hot-formula-parser\").SUPPORTED_FORMULAS;\nexport var parser = new FormulaParser();\n\nfunction App() {\n  const dispatch = useDispatch();\n  const elementsByID = useSelector((state: RootState) => {\n    return state.data.elements;\n  }, shallowEqual);\n  const allIDs = useSelector((state: RootState) => {\n    return state.data.ids;\n  }, shallowEqual);\n  const viewMode = useSelector((state: RootState) => {\n    return state.application.viewMode;\n  });\n\n  // these are temporary for testing\n  const addElementByType = useCallback(\n    (elementType: string) => {\n      dispatch(\n        dataSlice.actions.elementAdded({\n          id: elementType + allIDs.length,\n          elementType: elementType,\n        })\n      );\n    },\n    [dispatch, allIDs.length]\n  );\n\n  const elements = allIDs.map((id, index) => {\n    switch (elementsByID[id].elementType) {\n      case ElementTypes.inputCell:\n        return <InputCell key={index} id={id} />;\n      case ElementTypes.displayCell:\n        return <DisplayCell key={index} id={id} />;\n      case ElementTypes.selectCell:\n        return <SelectCell key={index} id={id} />\n      default:\n        return \"Error\"; // shouldn't ever get here\n    }\n  });\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <Toolbar>\n          <MenuButton\n            text={viewMode}\n            action={() => {\n              dispatch(\n                applicationSlice.actions.viewModeChanged({\n                  newMode: viewMode === ViewModes.edit ? ViewModes.view : ViewModes.edit,\n                })\n              );\n            }}\n          />\n          <ComponentMenu addElementCallback={addElementByType} />\n        </Toolbar>\n      </div>\n      <div className=\"left-toolbar\"></div>\n      <div id=\"content\" className=\"content\">{elements}</div>\n      <div className=\"right-toolbar\">\n        <PropertiesMenu />\n      </div>\n      <div className=\"footer\"></div>\n    </div>\n  );\n}\n\n// function App() {\n//   const dispatch = useDispatch();\n//   const [contextMenu, handleContextMenuClick] = useContextMenu([\n//     [\n//       {\n//         text: \"View Mode\",\n//         action: () => {\n//           dispatch(\n//             applicationSlice.actions.viewModeChanged({\n//               newMode: ViewModes.view,\n//             })\n//           );\n//         },\n//       },\n//       {\n//         text: \"Edit Mode\",\n//         action: () => {\n//           dispatch(\n//             applicationSlice.actions.viewModeChanged({\n//               newMode: ViewModes.edit,\n//             })\n//           );\n//         },\n//       },\n//     ],\n//   ]);\n\n//   return (\n//     <div onContextMenu={handleContextMenuClick} style={{ height: \"100%\" }}>\n//       {contextMenu}\n//       <Form />\n//     </div>\n//   );\n// }\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport dataSlice from \"./dataSlice\";\nimport stylesSlice from \"./stylesSlice\";\nimport applicationSlice from \"./applicationSlice\";\n\nexport const store = configureStore({\n    reducer: {\n        data: dataSlice.reducer,\n        styles: stylesSlice.reducer,\n        application: applicationSlice.reducer,\n    },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App/App\";\n// import reportWebVitals from \"./reportWebVitals\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}